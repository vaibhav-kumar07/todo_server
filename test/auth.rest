@url = http://localhost:3000/api/v1
@adminToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2ODhkMzBkMWUwMGEyZDEzYzA5Zjg0NzQiLCJlbWFpbCI6ImFkbWluQHRhc2ttYW5hZ2VtZW50LmNvbSIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTc1NDA4MzgzOCwiZXhwIjoxNzU0MTcwMjM4fQ.9wD5MCJOVHbBiC583AtJWh2MUnT-LTFsMvzqoGgd0-w
@managerToken = 
@memberToken = 
@adminRefreshToken = 

### ========================================
### 1. ADMIN LOGIN
### ========================================
# @name adminLogin
POST {{url}}/auth/login
Content-Type: application/json

{
  "email": "admin@taskmanagement.com",
  "password": "Admin123!"
}

### ========================================
### 2. GET ADMIN PROFILE
### ========================================
# @name adminProfile
GET {{url}}/auth/profile
Authorization: Bearer {{adminToken}}

### ========================================
### 3. ADMIN INVITES MANAGER
### ========================================
# @name inviteManager
POST {{url}}/auth/invite
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "viranshk7@gmail.com",
  "firstName": "John",
  "lastName": "Manager",
  "role": "MANAGER",
  "teamName": "Development Team",
  "teamDescription": "Software development team"
}

### ========================================
### 4. ADMIN INVITES MEMBER
### ========================================
# @name inviteMember
POST {{url}}/auth/invite
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "member@taskmanagement.com",
  "firstName": "Jane",
  "lastName": "Member",
  "role": "MEMBER",
  "teamName": "QA Team",
  "teamDescription": "Quality assurance team"
}

### ========================================
### 5. MANAGER LOGIN
### ========================================
# @name managerLogin
POST {{url}}/auth/login
Content-Type: application/json

{
  "email": "manager@taskmanagement.com",
  "password": "{{$randomPassword}}"
}

### ========================================
### 6. GET MANAGER PROFILE
### ========================================
# @name managerProfile
GET {{url}}/auth/profile
Authorization: Bearer {{managerToken}}

### ========================================
### 7. MANAGER INVITES MEMBER (SHOULD WORK)
### ========================================
# @name managerInviteMember
POST {{url}}/auth/invite
Authorization: Bearer {{managerToken}}
Content-Type: application/json

{
  "email": "developer@taskmanagement.com",
  "firstName": "Mike",
  "lastName": "Developer",
  "role": "MEMBER"
}

### ========================================
### 8. MANAGER INVITES MANAGER (SHOULD FAIL)
### ========================================
# @name managerInviteManager
POST {{url}}/auth/invite
Authorization: Bearer {{managerToken}}
Content-Type: application/json

{
  "email": "another-manager@taskmanagement.com",
  "firstName": "Sarah",
  "lastName": "Manager",
  "role": "MANAGER"
}

### ========================================
### 9. MEMBER LOGIN
### ========================================
# @name memberLogin
POST {{url}}/auth/login
Content-Type: application/json

{
  "email": "member@taskmanagement.com",
  "password": "{{$randomPassword}}"
}

### ========================================
### 10. GET MEMBER PROFILE
### ========================================
# @name memberProfile
GET {{url}}/auth/profile
Authorization: Bearer {{memberToken}}

### ========================================
### 11. MEMBER INVITES USER (SHOULD FAIL)
### ========================================
# @name memberInviteUser
POST {{url}}/auth/invite
Authorization: Bearer {{memberToken}}
Content-Type: application/json

{
  "email": "newuser@taskmanagement.com",
  "firstName": "New",
  "lastName": "User",
  "role": "MEMBER"
}

### ========================================
### 12. REFRESH TOKEN (ADMIN)
### ========================================
# @name refreshToken
POST {{url}}/auth/refresh
Content-Type: application/json

{
  "refreshToken": "{{adminRefreshToken}}"
}

### ========================================
### 13. INVALID LOGIN ATTEMPTS
### ========================================

### Wrong Password
POST {{url}}/auth/login
Content-Type: application/json

{
  "email": "admin@taskmanagement.com",
  "password": "wrongpassword"
}

### Non-existent User
POST {{url}}/auth/login
Content-Type: application/json

{
  "email": "nonexistent@taskmanagement.com",
  "password": "Admin123!"
}

### Invalid Email Format
POST {{url}}/auth/login
Content-Type: application/json

{
  "email": "invalid-email",
  "password": "Admin123!"
}

### ========================================
### 14. INVALID INVITATION ATTEMPTS
### ========================================

### Duplicate Email Invitation
POST {{url}}/auth/invite
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "admin@taskmanagement.com",
  "firstName": "Duplicate",
  "lastName": "User",
  "role": "MEMBER"
}

### Invalid Role
POST {{url}}/auth/invite
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "invalid@taskmanagement.com",
  "firstName": "Invalid",
  "lastName": "Role",
  "role": "INVALID_ROLE"
}

### Missing Required Fields
POST {{url}}/auth/invite
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "incomplete@taskmanagement.com",
  "firstName": "Incomplete"
}

### ========================================
### 15. UNAUTHORIZED ACCESS TESTS
### ========================================

### Access Profile Without Token
GET {{url}}/auth/profile

### Access Invite Without Token
POST {{url}}/auth/invite
Content-Type: application/json

{
  "email": "test@taskmanagement.com",
  "firstName": "Test",
  "lastName": "User",
  "role": "MEMBER"
}

### Access Profile With Invalid Token
GET {{url}}/auth/profile
Authorization: Bearer invalid-token

### ========================================
### 16. TOKEN VALIDATION TESTS
### ========================================

### Expired Token Test (if you have one)
GET {{url}}/auth/profile
Authorization: Bearer expired-token-here

### Malformed Token
GET {{url}}/auth/profile
Authorization: Bearer malformed.token.here

### ========================================
### 17. ROLE-BASED ACCESS TESTS
### ========================================

### Admin Accessing Admin-Only Endpoints
POST {{url}}/auth/invite
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "admin2@taskmanagement.com",
  "firstName": "Admin",
  "lastName": "Two",
  "role": "ADMIN"
}

### Manager Accessing Member-Only Endpoints
POST {{url}}/auth/invite
Authorization: Bearer {{managerToken}}
Content-Type: application/json

{
  "email": "member2@taskmanagement.com",
  "firstName": "Member",
  "lastName": "Two",
  "role": "MEMBER"
}

### ========================================
### 18. VALIDATION TESTS
### ========================================

### Invalid Email Format in Invitation
POST {{url}}/auth/invite
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "invalid-email-format",
  "firstName": "Test",
  "lastName": "User",
  "role": "MEMBER"
}

### Short Password in Login
POST {{url}}/auth/login
Content-Type: application/json

{
  "email": "admin@taskmanagement.com",
  "password": "123"
}

### Empty Fields
POST {{url}}/auth/login
Content-Type: application/json

{
  "email": "",
  "password": ""
}

### ========================================
### 19. SUCCESS SCENARIOS
### ========================================

### Successful Admin Login and Profile Access
# Step 1: Login
POST {{url}}/auth/login
Content-Type: application/json

{
  "email": "admin@taskmanagement.com",
  "password": "Admin123!"
}

# Step 2: Use the token from response to access profile
GET {{url}}/auth/profile
Authorization: Bearer {{adminToken}}

### Successful User Invitation by Admin
POST {{url}}/auth/invite
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "email": "successful@taskmanagement.com",
  "firstName": "Successful",
  "lastName": "User",
  "role": "MEMBER",
  "teamName": "New Team",
  "teamDescription": "A new team created by admin"
}

### ========================================
### 20. CLEANUP TESTS (Optional)
### ========================================

### Test Database Cleanup (if needed)
# These would be custom endpoints for testing purposes
# GET {{url}}/test/cleanup
# Authorization: Bearer {{adminToken}}

### ========================================
### NOTES:
### ========================================
# 1. Replace {{adminToken}}, {{managerToken}}, {{memberToken}} with actual tokens from login responses
# 2. The {{$randomPassword}} will be generated by the system and sent via email
# 3. Test the refresh token functionality with the refreshToken from login response
# 4. All endpoints should return appropriate HTTP status codes:
#    - 200: Success
#    - 201: Created
#    - 400: Bad Request
#    - 401: Unauthorized
#    - 403: Forbidden
#    - 404: Not Found
#    - 422: Validation Error
# 5. Check response bodies for proper error messages and data structure